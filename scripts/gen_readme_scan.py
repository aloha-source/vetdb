# scripts/gen_readme_scan.py
import os, pathlib, datetime

ROOT = pathlib.Path("schema"), pathlib.Path("patches")
OUT = pathlib.Path("README.md")

def classify(path: pathlib.Path):
    name = path.name.lower()
    if name.startswith("fk_"):  return "FK"
    if name.startswith("tr_"):  return "Trigger"
    if name.startswith("idx_"): return "Index"
    return "Main"

# 例: "041_visits.sql" -> "visits" / "users.sql" -> "users"
def table_key(path: pathlib.Path):
    base = path.stem
    parts = base.split("_", 1)
    return parts[1] if parts[0].isdigit() and len(parts) > 1 else base

files = [p for p in ROOT.rglob("*.sql")]
groups = {}
for p in files:
    key = table_key(p)
    groups.setdefault(key, []).append(p)

def md_link(p: pathlib.Path):
    rel = p.as_posix()
    return f"[{rel}]({rel})"

lines = []
lines.append("# Schema Index (scan)")
lines.append("")
lines.append("_generated by scripts/gen_readme_scan.py_")
lines.append("")
lines.append(f"_last update: {datetime.datetime.utcnow():%Y-%m-%d %H:%M:%S} UTC_")
lines.append("")

for key in sorted(groups.keys()):
    lines.append(f"## {key}")
    mains = [p for p in groups[key] if classify(p) == "Main"]
    others = [p for p in groups[key] if classify(p) != "Main"]
    for p in sorted(mains):
        lines.append(f"- 本体: {md_link(p)}")
    for p in sorted(others):
        lines.append(f"- {classify(p)}: {md_link(p)}")
    lines.append("")

new = "\n".join(lines) + "\n"
old = OUT.read_text(encoding="utf-8") if OUT.exists() else ""
if new != old:
    OUT.write_text(new, encoding="utf-8")
    print(f"[gen] updated {OUT}")
else:
    print(f"[gen] {OUT} up-to-date")
