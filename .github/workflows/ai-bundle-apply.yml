name: ai-bundle-apply (branch-local PR)

on:
  push:
    paths:
      - "ai_inbox/*.txt"
  workflow_dispatch:
    inputs:
      bundle_path:
        description: "Path to bundle in this branch (e.g., ai_inbox/ai_bundle_fixed.txt)"
        required: false
        default: "ai_inbox/ai_bundle_fixed.txt"
      pr_paths:
        description: "Limit PR to these globs (comma/newline). Default = header or patches/**"
        required: false
        default: ""

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout this branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - id: bundles
        name: Gather bundles (push or manual)
        shell: bash
        run: |
          set -e
          mkdir -p .bundles
          if [ "${{ github.event_name }}" = "push" ]; then
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            files="$(git diff --name-only "$BEFORE" "$AFTER" -- 'ai_inbox/*.txt' || true)"
            if [ -z "$files" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
              files="$(git show --name-only --pretty='' "$AFTER" -- 'ai_inbox/*.txt' || true)"
            fi
            list=""
            for f in $files; do
              [ -z "$f" ] && continue
              git show "$AFTER:$f" > ".bundles/$(basename "$f")" || true
              [ -s ".bundles/$(basename "$f")" ] && list="$list .bundles/$(basename "$f")"
            done
            echo "files=$list" >> "$GITHUB_OUTPUT"
            [ -n "$list" ] || { echo "::error::No ai_inbox bundles found"; exit 1; }
          else
            path="${{ github.event.inputs.bundle_path }}"
            [ -f "$path" ] || { echo "::error::Bundle not found: $path"; exit 1; }
            cp "$path" ".bundles/$(basename "$path")"
            echo "files=.bundles/$(basename "$path")" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure helper exists
        shell: bash
        run: |
          test -f scripts/apply_ai_bundle.py || { echo "::error::scripts/apply_ai_bundle.py not found"; exit 1; }
          chmod +x scripts/apply_ai_bundle.py

      - name: Apply bundle(s)
        shell: bash
        run: |
          set -e
          for f in ${{ steps.bundles.outputs.files }}; do
            python3 scripts/apply_ai_bundle.py "$f"
          done

      - id: prpaths
        name: Resolve PR paths
        shell: bash
        run: |
          paths="${{ github.event.inputs.pr_paths }}"
          if [ -z "$paths" ]; then
            for f in ${{ steps.bundles.outputs.files }}; do
              hdr="$(head -n 50 "$f" || true)"
              line="$(printf "%s\n" "$hdr" | sed -n 's/^# *PR_PATHS:\s*//p' | head -n1)"
              [ -n "$line" ] && { paths="$line"; break; }
            done
          fi
          [ -n "$paths" ] || paths="patches/**"
          printf "paths<<EOF\n%s\nEOF\n" \
            "$(printf "%s\n" "$paths" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sed '/^$/d')" \
            >> "$GITHUB_OUTPUT"

      - id: cpr
        name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ github.ref_name }}
          branch: bot/apply-ai-bundle-${{ github.run_number }}
          title: Apply AI bundle(s) on ${{ github.ref_name }}
          commit-message: Apply AI bundle(s)
          body: |
            Auto-created by ai-bundle-apply.
            Bundles: ${{ steps.bundles.outputs.files }}
            Paths:
            ${{ steps.prpaths.outputs.paths }}
          labels: ai-bundle, automation
          add-paths: |
            ${{ steps.prpaths.outputs.paths }}
          pathspec_error_no_match: false
          delete-branch: true

      - name: PR URL
        run: echo "${{ steps.cpr.outputs.pull-request-url }}"
