-- ============================================
-- VetDB: initial creation (tables plural, columns singular)
-- ============================================
/＊
下記は、これまでの合意を合成した VetDB の新規作成 SQL 全文（DROPなし）です。
	•	他DB名は farmDB（相手側）に統一した前提のコメント・命名にしています。
	•	テーブル名は複数形／カラム名は単数形。
	•	VetDB 側の 自元帳（SoT） と mirror（farmDB写し） を併置。
	•	双方向連携用に entity_links、通知キューに outbox / inbox_notifications を用意。
	•	バージョン管理用に schema_versions と 追加用プロシージャ を付与し、初期レコードを vetDBtable_v1 で登録します。
使い方メモ（超要約）
	•	自元帳（編集可）：farms / individuals / farm_users / visits / checkups / checkup_items / receipts / receipt_lines / treatment_master
	•	mirror（閲覧専用）：farms_mirror / individuals_mirror / farm_users_mirror（いずれも farmDB のスナップショット）
	•	対応付け：entity_links(entity_type, local_uuid, remote_uuid)
	•	通知：outbox（VetDB→farmDB）、inbox_notifications（farmDB→VetDB）
	•	バージョン管理：今後スキーマ更新時は
	•	変更DDLを流した後に CALL bump_schema_version('vetDBtable_v2', '…変更内容…'); を追加
	•	バージョン番号はあなたの合図で上げます（今回は v1 で登録）

このままベースにして、次は row_hash の正規化ルール や receipt確定SQL（visit→receipt_linesコピー）、同期payloadの標準スキーマ も用意できます。どこから進めますか？
＊/
-- USE `your_vetdb`;
SET NAMES utf8mb4 COLLATE utf8mb4_general_ci;

-- --------------------------------------------
-- 0) Schema versioning
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS schema_versions (
  id            INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  version_key   VARCHAR(64) NOT NULL UNIQUE,
  applied_at    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  note          VARCHAR(255) NULL
) ENGINE=InnoDB;

-- optional helper to append version rows later (use CALL bump_schema_version(...))
DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS bump_schema_version(
  IN p_version_key VARCHAR(64),
  IN p_note        VARCHAR(255)
)
BEGIN
  INSERT IGNORE INTO schema_versions(version_key, note)
  VALUES (p_version_key, p_note);
END$$
DELIMITER ;

-- --------------------------------------------
-- 1) Users (VetDB内ログインは vet/admin のみ)
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS users (
  id          INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid        CHAR(36) NOT NULL UNIQUE,
  name        VARCHAR(100) NOT NULL,
  email       VARCHAR(191) NULL,                  -- 認証で使うなら UNIQUE 付与推奨
  user_type   ENUM('vet','admin') NOT NULL,       -- farmユーザーはVetDBにはログインさせない
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_users_type (user_type)
) ENGINE=InnoDB;

-- --------------------------------------------
-- 2) VetDBの自元帳: farms / individuals（編集可：SoT）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS farms (
  id               INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid             CHAR(36) NOT NULL UNIQUE,      -- VetDBのSoT UUID
  name             VARCHAR(100) NOT NULL,
  billing_name     VARCHAR(120),
  billing_address  VARCHAR(255),
  deleted_at       DATETIME NULL,
  row_hash         CHAR(64) NULL,                 -- 差分検出用（正規化後ハッシュ）
  created_at       DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at       DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS individuals (
  id               INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid             CHAR(36) NOT NULL UNIQUE,      -- VetDBのSoT UUID
  farm_uuid        CHAR(36) NOT NULL,             -- ↔ farms.uuid
  ear_tag          VARCHAR(64) NOT NULL,
  name             VARCHAR(100),
  sex              ENUM('male','female','cast','unknown') DEFAULT 'unknown',
  birth_date       DATE NULL,
  status           ENUM('active','sold','dead','unknown') DEFAULT 'active',
  deleted_at       DATETIME NULL,
  row_hash         CHAR(64) NULL,
  created_at       DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at       DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_individuals_ear_tag (ear_tag),
  INDEX idx_individuals_farm_ear (farm_uuid, ear_tag),
  CONSTRAINT fk_individuals_farm_uuid
    FOREIGN KEY (farm_uuid) REFERENCES farms(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB;

-- --------------------------------------------
-- 3) VetDBの自前 farm_users（連絡先SoT：ログイン不可）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS farm_users (
  id                INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid              CHAR(36) NOT NULL UNIQUE,     -- VetDBのSoT UUID
  farm_uuid         CHAR(36) NOT NULL,            -- ↔ farms.uuid
  display_name      VARCHAR(100) NOT NULL,
  email             VARCHAR(191) NULL,
  phone             VARCHAR(50) NULL,
  role_label        VARCHAR(100) NULL,            -- 「場長」「経理」など
  preferred_channel ENUM('email','phone','none') DEFAULT 'email',
  is_primary        TINYINT(1) NOT NULL DEFAULT 0,
  note              VARCHAR(255) NULL,
  deleted_at        DATETIME NULL,
  row_hash          CHAR(64) NULL,
  created_at        DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at        DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_farm_users_farm (farm_uuid, is_primary),
  INDEX idx_farm_users_email (email),
  CONSTRAINT fk_farm_users_farm_uuid
    FOREIGN KEY (farm_uuid) REFERENCES farms(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB;

-- --------------------------------------------
-- 4) Mirrors（farmDB由来：閲覧専用スナップショット）
--     - farmDB 側の UUID を保持（こちらでは編集しない）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS farms_mirror (
  id                 INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid               CHAR(36) NOT NULL UNIQUE,    -- farmDBのfarm UUID
  name               VARCHAR(100) NOT NULL,
  billing_name       VARCHAR(120),
  billing_address    VARCHAR(255),
  deleted_at         DATETIME NULL,
  updated_at_source  DATETIME NULL,               -- 元DBの更新時刻
  created_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS individuals_mirror (
  id                 INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid               CHAR(36) NOT NULL UNIQUE,    -- farmDBのindividual UUID
  farm_uuid          CHAR(36) NOT NULL,           -- farmDBのfarm UUID
  ear_tag            VARCHAR(64) NOT NULL,
  name               VARCHAR(100),
  sex                ENUM('male','female','cast','unknown') DEFAULT 'unknown',
  birth_date         DATE NULL,
  status             ENUM('active','sold','dead','unknown') DEFAULT 'active',
  deleted_at         DATETIME NULL,
  updated_at_source  DATETIME NULL,
  UNIQUE KEY uq_individuals_mirror_ear_tag (ear_tag),
  INDEX idx_individuals_mirror_farm_ear (farm_uuid, ear_tag),
  created_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS farm_users_mirror (
  id                 INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid               CHAR(36) NOT NULL UNIQUE,    -- farmDBのuser UUID（ログイン可能な側）
  farm_uuid          CHAR(36) NOT NULL,           -- farmDBのfarm UUID
  display_name       VARCHAR(100) NOT NULL,
  email              VARCHAR(191) NULL,
  phone              VARCHAR(50) NULL,
  role_label         VARCHAR(100) NULL,
  deleted_at         DATETIME NULL,
  updated_at_source  DATETIME NULL,
  created_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_farm_users_mirror_farm (farm_uuid, display_name),
  INDEX idx_farm_users_mirror_email (email)
) ENGINE=InnoDB;

-- --------------------------------------------
-- 5) 同一実体の対応付け（local ↔ remote UUID）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS entity_links (
  id           BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  entity_type  ENUM('farm','individual','farm_user') NOT NULL,
  local_uuid   CHAR(36) NOT NULL,                -- VetDB SoT 側 UUID
  remote_uuid  CHAR(36) NOT NULL,                -- farmDB 側 UUID
  UNIQUE KEY uq_entity_link (entity_type, local_uuid, remote_uuid),
  INDEX idx_entity_link_local  (entity_type, local_uuid),
  INDEX idx_entity_link_remote (entity_type, remote_uuid),
  created_at   DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- --------------------------------------------
-- 6) 処置マスタ（VetDB側で管理）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS treatment_master (
  id          INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid        CHAR(36) NOT NULL UNIQUE,
  code        VARCHAR(32) NOT NULL,
  name        VARCHAR(120) NOT NULL,
  point       INT NOT NULL,
  unit        VARCHAR(16) DEFAULT '回',
  note        VARCHAR(255),
  is_active   TINYINT(1) NOT NULL DEFAULT 1,
  UNIQUE KEY uq_treatment_code (code),
  INDEX idx_treatment_active (is_active)
) ENGINE=InnoDB;

-- --------------------------------------------
-- 7) 往診・診察・処置（VetDBの一次データ：SoT）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS visits (
  id          INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid        CHAR(36) NOT NULL UNIQUE,
  farm_uuid   CHAR(36) NOT NULL,                 -- ↔ farms.uuid（請求先farm）
  vet_user_id INT UNSIGNED NOT NULL,             -- ↔ users.id（user_type='vet'）
  visited_at  DATETIME NOT NULL,
  status      ENUM('draft','confirmed','cancelled') NOT NULL DEFAULT 'draft',
  memo        TEXT,
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_visits_farm_date (farm_uuid, visited_at),
  INDEX idx_visits_vet_date  (vet_user_id, visited_at),
  CONSTRAINT fk_visits_farm_uuid
    FOREIGN KEY (farm_uuid) REFERENCES farms(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_visits_vet_user
    FOREIGN KEY (vet_user_id) REFERENCES users(id)
    ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS checkups (
  id             INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid           CHAR(36) NOT NULL UNIQUE,
  visit_uuid     CHAR(36) NOT NULL,              -- ↔ visits.uuid
  individual_uuid CHAR(36) NOT NULL,             -- ↔ individuals.uuid
  symptom_text   TEXT,
  diagnosis_text TEXT,
  status         ENUM('draft','ready') NOT NULL DEFAULT 'draft',
  created_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_checkups_visit_individual (visit_uuid, individual_uuid),
  INDEX idx_checkups_visit (visit_uuid),
  INDEX idx_checkups_individual (individual_uuid),
  CONSTRAINT fk_checkups_visit_uuid
    FOREIGN KEY (visit_uuid) REFERENCES visits(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_checkups_individual_uuid
    FOREIGN KEY (individual_uuid) REFERENCES individuals(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS checkup_items (
  id                INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid              CHAR(36) NOT NULL UNIQUE,
  checkup_uuid      CHAR(36) NOT NULL,           -- ↔ checkups.uuid
  treatment_uuid    CHAR(36) NOT NULL,           -- ↔ treatment_master.uuid
  quantity          DECIMAL(10,2) NOT NULL DEFAULT 1.00,
  unit_price_point  INT NOT NULL,                -- 記録時点の点数コピー
  subtotal_point    INT NOT NULL,                -- quantity × unit_price_point
  note              VARCHAR(255),
  created_at        DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at        DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_checkup_items_checkup (checkup_uuid),
  INDEX idx_checkup_items_treatment (treatment_uuid),
  CONSTRAINT fk_checkup_items_checkup_uuid
    FOREIGN KEY (checkup_uuid) REFERENCES checkups(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_checkup_items_treatment_uuid
    FOREIGN KEY (treatment_uuid) REFERENCES treatment_master(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB;

-- --------------------------------------------
-- 8) 伝票（写しの世界：1 visit → n receipts）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS receipts (
  id                          INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid                        CHAR(36) NOT NULL UNIQUE,
  visit_uuid                  CHAR(36) NOT NULL,      -- ↔ visits.uuid
  farm_uuid                   CHAR(36) NOT NULL,      -- 請求対象farm（visitと同一想定）
  -- スナップショット
  farm_name_snapshot          VARCHAR(120) NOT NULL,
  farm_billing_name_snapshot  VARCHAR(120),
  farm_billing_address_snapshot VARCHAR(255),
  vet_user_id                 INT UNSIGNED NOT NULL,  -- 参照用
  vet_user_name_snapshot      VARCHAR(100) NOT NULL,
  issued_by_user_id           INT UNSIGNED NULL,
  issued_by_user_name_snapshot VARCHAR(100),
  visit_visited_at_snapshot   DATETIME NOT NULL,
  -- 伝票属性
  receipt_number              VARCHAR(50) NULL,
  issued_at                   DATETIME NOT NULL,
  total_point                 INT NOT NULL,
  status                      ENUM('issued','cancelled') NOT NULL DEFAULT 'issued',
  lock_version                INT UNSIGNED NOT NULL DEFAULT 1,
  created_at                  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at                  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_receipts_farm_date (farm_uuid, issued_at),
  INDEX idx_receipts_visit     (visit_uuid),
  CONSTRAINT fk_receipts_visit_uuid
    FOREIGN KEY (visit_uuid) REFERENCES visits(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_receipts_farm_uuid
    FOREIGN KEY (farm_uuid)  REFERENCES farms(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_receipts_vet_user
    FOREIGN KEY (vet_user_id) REFERENCES users(id)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_receipts_issued_by
    FOREIGN KEY (issued_by_user_id) REFERENCES users(id)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS receipt_lines (
  id                         INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  uuid                       CHAR(36) NOT NULL UNIQUE,
  receipt_uuid               CHAR(36) NOT NULL,       -- ↔ receipts.uuid
  individual_uuid            CHAR(36) NULL,           -- 索引用（NULL許容）
  individual_ear_tag_snapshot VARCHAR(64) NOT NULL,
  individual_name_snapshot   VARCHAR(100),
  treatment_code_snapshot    VARCHAR(32) NOT NULL,
  treatment_name_snapshot    VARCHAR(120) NOT NULL,
  unit_point_snapshot        INT NOT NULL,
  quantity                   DECIMAL(10,2) NOT NULL,
  subtotal_point             INT NOT NULL,
  note                       VARCHAR(255),
  created_at                 DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at                 DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_receipt_lines_receipt (receipt_uuid),
  INDEX idx_receipt_lines_individual (individual_uuid),
  CONSTRAINT fk_receipt_lines_receipt_uuid
    FOREIGN KEY (receipt_uuid) REFERENCES receipts(uuid)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_receipt_lines_individual_uuid
    FOREIGN KEY (individual_uuid) REFERENCES individuals(uuid)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB;

-- --------------------------------------------
-- 9) 連携（通知ボックス）
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS outbox (
  id             BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  aggregate      VARCHAR(64) NOT NULL,          -- 'farm','individual','farm_user','visit','checkup','receipt' 等
  aggregate_uuid CHAR(36) NOT NULL,
  event_type     VARCHAR(16) NOT NULL,          -- 'UPSERT','DELETE'
  payload        JSON NOT NULL,                 -- ミニマム差分 or スナップショット
  target         VARCHAR(32) NOT NULL,          -- 'farmdb' など宛先識別子
  created_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  processed_at   DATETIME NULL,
  INDEX idx_outbox_target_created (target, created_at)
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS inbox_notifications (
  id            BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  source        ENUM('farmdb') NOT NULL,
  entity_type   ENUM('farm','individual','farm_user','visit','checkup','receipt') NOT NULL,
  remote_uuid   CHAR(36) NOT NULL,
  payload       JSON NOT NULL,                  -- 差分の要約など
  status        ENUM('pending','applied','ignored') NOT NULL DEFAULT 'pending',
  received_at   DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  processed_at  DATETIME NULL,
  INDEX idx_inbox_status (status, received_at),
  INDEX idx_inbox_entity (entity_type, remote_uuid)
) ENGINE=InnoDB;

-- --------------------------------------------
-- 10) Optional guards（最低限の業務ルールをDBレベルで補助）
--     * 不要ならコメントアウトしてください
-- --------------------------------------------
DELIMITER $$
CREATE TRIGGER IF NOT EXISTS trg_visits_bi_check_vet
BEFORE INSERT ON visits
FOR EACH ROW
BEGIN
  DECLARE vtype VARCHAR(10);
  SELECT user_type INTO vtype FROM users WHERE id = NEW.vet_user_id LIMIT 1;
  IF vtype <> 'vet' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'vet_user_id must reference a VET user';
  END IF;
END$$
DELIMITER ;

-- --------------------------------------------
-- 11) Set initial schema version
-- --------------------------------------------
CALL bump_schema_version('vetDBtable_v1', 'Baseline: local SoT + mirrors (farmDB), plural tables / singular columns');